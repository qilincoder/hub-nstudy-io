import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as l,c as s,a as t,b as n,d as a,e as c}from"./app-D9W4Cu8K.js";const h={},o={id:"c-面向对象设计模式纵横谈",tabindex:"-1"},d={class:"header-anchor",href:"#c-面向对象设计模式纵横谈"},p={href:"https://blog.csdn.net/Jack_software/article/details/78675005",target:"_blank",rel:"noopener noreferrer"},g=c('<h2 id="面向对象设计模式与原则" tabindex="-1"><a class="header-anchor" href="#面向对象设计模式与原则"><span>面向对象设计模式与原则</span></a></h2><ul><li>针对接口编程，而不是针对实现编程</li><li>优先使用对象组合，而不是类继承</li><li>封装变化点</li><li>使用重构得到模式---设计模式的应用不宜先入为主</li></ul><h3 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h3><ul><li>单一职责原则（SRP）</li><li>开放封闭原则（OCP）</li><li>（里氏）Liskov替换原则（LSP）</li><li>依赖倒置原则（DIP）</li><li>接口隔离原则（ISP）</li><li></li><li>组合重用</li><li>迪米特（最小知识）原则</li></ul><h2 id="_23种设计模式-1-5-6-12-13-23" tabindex="-1"><a class="header-anchor" href="#_23种设计模式-1-5-6-12-13-23"><span>23种设计模式 （1-5,6-12,13-23）</span></a></h2><h3 id="_1-singleton单例模式" tabindex="-1"><a class="header-anchor" href="#_1-singleton单例模式"><span>1.Singleton单例模式</span></a></h3><h4 id="动机-motivation" tabindex="-1"><a class="header-anchor" href="#动机-motivation"><span>动机（Motivation）</span></a></h4><p>在软件系统中，经常有这样一些特殊的类，必须保证它们在系统中只存在一个实例，才能确保它们的逻辑正确性以及良好的效率<br> 如何绕过常规的构造器，提供一种机制来保证一个类只有一个实例？<br> 这应该是类设计者的责任，而不是使用者的责任</p><h3 id="意图-intent" tabindex="-1"><a class="header-anchor" href="#意图-intent"><span>意图（Intent）</span></a></h3><p>保证一个类仅有一个实例，并提供一个实例的全局访问点。</p><h3 id="结构-struct" tabindex="-1"><a class="header-anchor" href="#结构-struct"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323141418277.png" alt="Singleton Struct" tabindex="0" loading="lazy"><figcaption>Singleton Struct</figcaption></figure><h3 id="_2-abstract-factory抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#_2-abstract-factory抽象工厂模式"><span>2.Abstract Factory抽象工厂模式</span></a></h3><h4 id="动机-motivation-1" tabindex="-1"><a class="header-anchor" href="#动机-motivation-1"><span>动机（Motivation）</span></a></h4><p>在软件系统中，经常面临着“一系列相互依赖的对象”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作<br> 如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种“封装机制”来避免客户程序和这种“多系列”具体对象创建工作的紧耦合？</p><h3 id="意图-intent-1" tabindex="-1"><a class="header-anchor" href="#意图-intent-1"><span>意图（Intent）</span></a></h3><p>提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们 的具体类。</p><h3 id="结构-struct-1" tabindex="-1"><a class="header-anchor" href="#结构-struct-1"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323141513457.png" alt="Abstract Factory" tabindex="0" loading="lazy"><figcaption>Abstract Factory</figcaption></figure><h3 id="_3-builder生成器模式" tabindex="-1"><a class="header-anchor" href="#_3-builder生成器模式"><span>3.Builder生成器模式</span></a></h3><h4 id="动机-motivation-2" tabindex="-1"><a class="header-anchor" href="#动机-motivation-2"><span>动机（Motivation）</span></a></h4><p>在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合起来的算法却相对稳定。<br> 如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求改变而改变？</p><h3 id="意图-intent-2" tabindex="-1"><a class="header-anchor" href="#意图-intent-2"><span>意图（Intent）</span></a></h3><p>将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><h3 id="结构-struct-2" tabindex="-1"><a class="header-anchor" href="#结构-struct-2"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323141605715.png" alt="Builder" tabindex="0" loading="lazy"><figcaption>Builder</figcaption></figure><h3 id="_4-factory-method工场方法模式" tabindex="-1"><a class="header-anchor" href="#_4-factory-method工场方法模式"><span>4.Factory Method工场方法模式</span></a></h3><h4 id="动机-motivation-3" tabindex="-1"><a class="header-anchor" href="#动机-motivation-3"><span>动机（Motivation）</span></a></h4><p>在软件系统中，经常面临着“某个对象”的创建工作；由于需求的变化，这个对象经常面临着剧烈的变化，但是他们拥有比较稳定的接口。<br> 如何应对这种变化？如何提供一种“封装机制”来隔离出“这个易变对象”的变化，从而保持系统中“其他依赖该对象的对象”不随着需求改变而改变？</p><h3 id="意图-intent-3" tabindex="-1"><a class="header-anchor" href="#意图-intent-3"><span>意图（Intent）</span></a></h3><p>定义一个用于创建对象的接口，让子类决定实例化那一个类。Factory Method使得一个类的实例化延迟到子类。</p><h3 id="结构-struct-3" tabindex="-1"><a class="header-anchor" href="#结构-struct-3"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323141242188.png" alt="Factory Method" tabindex="0" loading="lazy"><figcaption>Factory Method</figcaption></figure><h3 id="_5-prototype原型模式" tabindex="-1"><a class="header-anchor" href="#_5-prototype原型模式"><span>5.Prototype原型模式</span></a></h3><h4 id="动机-motivation-4" tabindex="-1"><a class="header-anchor" href="#动机-motivation-4"><span>动机（Motivation）</span></a></h4><p>在软件系统中，经常面临着“某些复杂对象”的创建工作；由于需求的变化，这个对象经常面临着剧烈的变化，但是他们拥有比较稳定的接口。<br> 如何应对这种变化？如果向“客户程序（使用这些对象的程序）“隔离出”这些易变对象”，从而使得“依赖这些易变对象的客户程序”不随需求改变而改变？</p><h3 id="意图-intent-4" tabindex="-1"><a class="header-anchor" href="#意图-intent-4"><span>意图（Intent）</span></a></h3><p>使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</p><h3 id="结构-struct-4" tabindex="-1"><a class="header-anchor" href="#结构-struct-4"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323142502531.png" alt="Prototype" tabindex="0" loading="lazy"><figcaption>Prototype</figcaption></figure><h3 id="_6-adapter适配器模式" tabindex="-1"><a class="header-anchor" href="#_6-adapter适配器模式"><span>6.Adapter适配器模式</span></a></h3><h4 id="动机-motivation-5" tabindex="-1"><a class="header-anchor" href="#动机-motivation-5"><span>动机（Motivation）</span></a></h4><p>在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。<br> 如何应对这种“迁移的变化”？如何既能够利用现有对象的良好实现，同事又能满足新的应用环境所要求的接口？</p><h3 id="意图-intent-5" tabindex="-1"><a class="header-anchor" href="#意图-intent-5"><span>意图（Intent）</span></a></h3><p>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h3 id="结构-struct-5" tabindex="-1"><a class="header-anchor" href="#结构-struct-5"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323143049733.png" alt="Adapter" tabindex="0" loading="lazy"><figcaption>Adapter</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/2019032314313869.png" alt="Adapter" tabindex="0" loading="lazy"><figcaption>Adapter</figcaption></figure><h3 id="_7-bridge桥接模式" tabindex="-1"><a class="header-anchor" href="#_7-bridge桥接模式"><span>7.Bridge桥接模式</span></a></h3><h4 id="动机-motivation-6" tabindex="-1"><a class="header-anchor" href="#动机-motivation-6"><span>动机（Motivation）</span></a></h4><p>应对多维度的变化，Tank例子是“平台的变化”和“型号的变化”<br> 如果应对这种“多维度的变化”,而不引入额外复杂度？</p><h3 id="意图-intent-6" tabindex="-1"><a class="header-anchor" href="#意图-intent-6"><span>意图（Intent）</span></a></h3><p>将抽象部分与实现部分分离，使它们你都可以独立地变化。</p><h3 id="结构-struct-6" tabindex="-1"><a class="header-anchor" href="#结构-struct-6"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323143758691.png" alt="Bridge" tabindex="0" loading="lazy"><figcaption>Bridge</figcaption></figure><h3 id="_8-composite组合模式" tabindex="-1"><a class="header-anchor" href="#_8-composite组合模式"><span>8.Composite组合模式</span></a></h3><h4 id="动机-motivation-7" tabindex="-1"><a class="header-anchor" href="#动机-motivation-7"><span>动机（Motivation）</span></a></h4><p>客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口）的变化将引起客户代码的频繁变化，带来了代码的维度、扩展性等弊端。<br> 如何将“客户代码与复杂的对象容器结构”解耦？让对象容器自己来实现自身的复杂结构，从而使得 客户代码就像处理简单对象一样来处理复杂的对象容器？</p><h3 id="意图-intent-7" tabindex="-1"><a class="header-anchor" href="#意图-intent-7"><span>意图（Intent）</span></a></h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。</p><h3 id="结构-struct-7" tabindex="-1"><a class="header-anchor" href="#结构-struct-7"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323144532751.png" alt="Composite" tabindex="0" loading="lazy"><figcaption>Composite</figcaption></figure><h3 id="_9-decorator装饰模式" tabindex="-1"><a class="header-anchor" href="#_9-decorator装饰模式"><span>9.Decorator装饰模式</span></a></h3><h4 id="动机-motivation-8" tabindex="-1"><a class="header-anchor" href="#动机-motivation-8"><span>动机（Motivation）</span></a></h4><p>“过度地使用了继承来扩展对象的功能”，由于继承为类型引入的静态特质，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀（多继承）。<br> 如何使“对象功能的扩展”能够根据需要来动态地实现？同时避免“扩展功能的增多”带来的子类膨胀问题？从而使得任何“功能扩展变化”所导致的影响降为最低？</p><h3 id="意图-intent-8" tabindex="-1"><a class="header-anchor" href="#意图-intent-8"><span>意图（Intent）</span></a></h3><p>动态地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类更为灵活。</p><h3 id="结构-struct-8" tabindex="-1"><a class="header-anchor" href="#结构-struct-8"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323151139160.png" alt="Decorator" tabindex="0" loading="lazy"><figcaption>Decorator</figcaption></figure><h3 id="_10-facade外观模式" tabindex="-1"><a class="header-anchor" href="#_10-facade外观模式"><span>10.Facade外观模式</span></a></h3><h4 id="动机-motivation-9" tabindex="-1"><a class="header-anchor" href="#动机-motivation-9"><span>动机（Motivation）</span></a></h4><p>组件的客户端和组件中各种复杂的子系统有了更多的耦合，随着外部客户程序和各个子系统的演化，这种过多的耦合面临很多变化的挑战。<br> 如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统变化之间依赖相互解耦？</p><h3 id="意图-intent-9" tabindex="-1"><a class="header-anchor" href="#意图-intent-9"><span>意图（Intent）</span></a></h3><p>为子系统中的一组接口提供统一一致的界面，Facede模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h3 id="结构-struct-9" tabindex="-1"><a class="header-anchor" href="#结构-struct-9"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323151252525.png" alt="Facade" tabindex="0" loading="lazy"><figcaption>Facade</figcaption></figure><h3 id="_11-flyweight享元模式" tabindex="-1"><a class="header-anchor" href="#_11-flyweight享元模式"><span>11.Flyweight享元模式</span></a></h3><h4 id="动机-motivation-10" tabindex="-1"><a class="header-anchor" href="#动机-motivation-10"><span>动机（Motivation）</span></a></h4><p>采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时带价--只要指内存需求方面的代价。<br> 如何避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？</p><h3 id="意图-intent-10" tabindex="-1"><a class="header-anchor" href="#意图-intent-10"><span>意图（Intent）</span></a></h3><p>运用共享技术有效地支持大量细粒度的对象。</p><h3 id="结构-struct-10" tabindex="-1"><a class="header-anchor" href="#结构-struct-10"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323152058832.png" alt="Flyweight" tabindex="0" loading="lazy"><figcaption>Flyweight</figcaption></figure><h3 id="_12-proxy代理模式" tabindex="-1"><a class="header-anchor" href="#_12-proxy代理模式"><span>12.Proxy代理模式</span></a></h3><h4 id="动机-motivation-11" tabindex="-1"><a class="header-anchor" href="#动机-motivation-11"><span>动机（Motivation）</span></a></h4><p>在面向对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等），直接访问会给使用者或者系统结构带来很多麻烦。<br> 如何在不失去透明操作对象的同时来管理控制这些对象特有的复杂性？增加一层间接层是软件开发中常见的解决方式。</p><h3 id="意图-intent-11" tabindex="-1"><a class="header-anchor" href="#意图-intent-11"><span>意图（Intent）</span></a></h3><p>为其他对象提供一种代理以控制对这个对象的访问。</p><h3 id="结构-struct-11" tabindex="-1"><a class="header-anchor" href="#结构-struct-11"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323152304572.png" alt="Proxy" tabindex="0" loading="lazy"><figcaption>Proxy</figcaption></figure><h3 id="_13-template-method模板方法" tabindex="-1"><a class="header-anchor" href="#_13-template-method模板方法"><span>13.Template Method模板方法</span></a></h3><h4 id="动机-motivation-12" tabindex="-1"><a class="header-anchor" href="#动机-motivation-12"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。<br> 如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</p><h3 id="意图-intent-12" tabindex="-1"><a class="header-anchor" href="#意图-intent-12"><span>意图（Intent）</span></a></h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法结构即可重定义该算法的某些特定步骤。</p><h3 id="结构-struct-12" tabindex="-1"><a class="header-anchor" href="#结构-struct-12"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323152653464.png" alt="Template Method" tabindex="0" loading="lazy"><figcaption>Template Method</figcaption></figure><h3 id="_14-command模式" tabindex="-1"><a class="header-anchor" href="#_14-command模式"><span>14.Command模式</span></a></h3><h4 id="动机-motivation-13" tabindex="-1"><a class="header-anchor" href="#动机-motivation-13"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合--比如需要对行为进行“记录、撤销、重做”、事务等处理，这种无法抵御变化的紧耦合是不合适的。<br> 在这种情况下，如何将“行为请求者”与“行为的“实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p><h3 id="意图-intent-13" tabindex="-1"><a class="header-anchor" href="#意图-intent-13"><span>意图（Intent）</span></a></h3><p>将一个请求封装成为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><h3 id="结构-struct-13" tabindex="-1"><a class="header-anchor" href="#结构-struct-13"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323154818841.png" alt="Command" tabindex="0" loading="lazy"><figcaption>Command</figcaption></figure><h3 id="_15-interpreter解释器模式" tabindex="-1"><a class="header-anchor" href="#_15-interpreter解释器模式"><span>15.Interpreter解释器模式</span></a></h3><h4 id="动机-motivation-14" tabindex="-1"><a class="header-anchor" href="#动机-motivation-14"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，如果某一特定领域的问题比较复杂，类似的模式不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。<br> 在这种情况下，将特定领域的问题表达为某种语法规则下的语句，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。</p><h3 id="意图-intent-14" tabindex="-1"><a class="header-anchor" href="#意图-intent-14"><span>意图（Intent）</span></a></h3><p>给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。</p><h3 id="结构-struct-14" tabindex="-1"><a class="header-anchor" href="#结构-struct-14"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323155729408.png" alt="Interpreter" tabindex="0" loading="lazy"><figcaption>Interpreter</figcaption></figure><h3 id="_16-mediator中介者模式" tabindex="-1"><a class="header-anchor" href="#_16-mediator中介者模式"><span>16.Mediator中介者模式</span></a></h3><h4 id="动机-motivation-15" tabindex="-1"><a class="header-anchor" href="#动机-motivation-15"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果遇到一些需求的更改，这种直接的引用关系将面临不断的变化。<br> 在这种情况下，我们可以使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好的抵御变化？</p><h3 id="意图-intent-15" tabindex="-1"><a class="header-anchor" href="#意图-intent-15"><span>意图（Intent）</span></a></h3><p>用一个中介对象来封装一系列的对象交互。中介者使用各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><h3 id="结构-struct-15" tabindex="-1"><a class="header-anchor" href="#结构-struct-15"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323155819257.png" alt="Mediator" tabindex="0" loading="lazy"><figcaption>Mediator</figcaption></figure><h3 id="_17-iterator迭代器模式" tabindex="-1"><a class="header-anchor" href="#_17-iterator迭代器模式"><span>17.Iterator迭代器模式</span></a></h3><h4 id="动机-motivation-16" tabindex="-1"><a class="header-anchor" href="#动机-motivation-16"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，集合对象内部结构常常变化各异。但对于这些集合对象，我们希望在不暴漏其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素；同时这种“透明遍历”也为同一种算法在多种集合对象上进行操作提供可能。<br> 使用面向对象技术将这种遍历机制抽象为“迭代器对象”应对“变化中的集合对象”提供一种优雅的方式？</p><h3 id="意图-intent-16" tabindex="-1"><a class="header-anchor" href="#意图-intent-16"><span>意图（Intent）</span></a></h3><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴漏该对象的内部表示。</p><h3 id="结构-struct-16" tabindex="-1"><a class="header-anchor" href="#结构-struct-16"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/2019032316072335.png" alt="Iterator" tabindex="0" loading="lazy"><figcaption>Iterator</figcaption></figure><h3 id="_18-observer观察者模式" tabindex="-1"><a class="header-anchor" href="#_18-observer观察者模式"><span>18.Observer观察者模式</span></a></h3><h4 id="动机-motivation-17" tabindex="-1"><a class="header-anchor" href="#动机-motivation-17"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系”---一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。<br> 使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合？</p><h3 id="意图-intent-17" tabindex="-1"><a class="header-anchor" href="#意图-intent-17"><span>意图（Intent）</span></a></h3><p>定义。</p><h3 id="结构-struct-17" tabindex="-1"><a class="header-anchor" href="#结构-struct-17"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323162803317.png" alt="Observer" tabindex="0" loading="lazy"><figcaption>Observer</figcaption></figure><h3 id="_19-chain-of-responsibility职责链模式" tabindex="-1"><a class="header-anchor" href="#_19-chain-of-responsibility职责链模式"><span>19.Chain of Responsibility职责链模式</span></a></h3><h4 id="动机-motivation-18" tabindex="-1"><a class="header-anchor" href="#动机-motivation-18"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显式指定，将必不可少地带来请求发送者与接受者的紧耦合。<br> 如何使请求的发送者不需要指定具体的接受者？让请求的接受者自己在运行时决定来处理请求，从而使两者解耦。</p><h3 id="意图-intent-18" tabindex="-1"><a class="header-anchor" href="#意图-intent-18"><span>意图（Intent）</span></a></h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递请求，知道有一个对象处理它为止。</p><h3 id="结构-struct-18" tabindex="-1"><a class="header-anchor" href="#结构-struct-18"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323163139556.png" alt="Chain of Responsibility" tabindex="0" loading="lazy"><figcaption>Chain of Responsibility</figcaption></figure><h3 id="_20-mement备忘录模式" tabindex="-1"><a class="header-anchor" href="#_20-mement备忘录模式"><span>20.Mement备忘录模式</span></a></h3><h4 id="动机-motivation-19" tabindex="-1"><a class="header-anchor" href="#动机-motivation-19"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，某些对象的状态在抓换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态。如果使用一些共有接口来让其他对象得到对象的状态，便会暴漏对象的细节实现。<br> 如何实现对象状态的良好保存于恢复？但同时又不会因此而破坏对象本身的封装性。</p><h3 id="意图-intent-19" tabindex="-1"><a class="header-anchor" href="#意图-intent-19"><span>意图（Intent）</span></a></h3><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</p><h3 id="结构-struct-19" tabindex="-1"><a class="header-anchor" href="#结构-struct-19"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323163610210.png" alt="Memento" tabindex="0" loading="lazy"><figcaption>Memento</figcaption></figure><h3 id="_21-state状态模式" tabindex="-1"><a class="header-anchor" href="#_21-state状态模式"><span>21.State状态模式</span></a></h3><h4 id="动机-motivation-20" tabindex="-1"><a class="header-anchor" href="#动机-motivation-20"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。<br> 如何在运行时根据对象的状态来透明地更改对象的行为？而不会为对象操作和状态转化之间引入紧耦合？</p><h3 id="意图-intent-20" tabindex="-1"><a class="header-anchor" href="#意图-intent-20"><span>意图（Intent）</span></a></h3><p>允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。</p><h3 id="结构-struct-20" tabindex="-1"><a class="header-anchor" href="#结构-struct-20"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323164217791.png" alt="State" tabindex="0" loading="lazy"><figcaption>State</figcaption></figure><h3 id="_22-strategy策略模式" tabindex="-1"><a class="header-anchor" href="#_22-strategy策略模式"><span>22.Strategy策略模式</span></a></h3><h4 id="动机-motivation-21" tabindex="-1"><a class="header-anchor" href="#动机-motivation-21"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂；而且有时候支持不使用的算法也是一个性能负担。<br> 如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题?</p><h3 id="意图-intent-21" tabindex="-1"><a class="header-anchor" href="#意图-intent-21"><span>意图（Intent）</span></a></h3><p>定义一系列算法，把它们一个个封装起来，并且使它们可互相替换。该模式使得算法可独立使用它的客户而变化。</p><h3 id="结构-struct-21" tabindex="-1"><a class="header-anchor" href="#结构-struct-21"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323164617623.png" alt="Strategy" tabindex="0" loading="lazy"><figcaption>Strategy</figcaption></figure><h3 id="_23-visitor访问者模式" tabindex="-1"><a class="header-anchor" href="#_23-visitor访问者模式"><span>23.Visitor访问者模式</span></a></h3><h4 id="动机-motivation-22" tabindex="-1"><a class="header-anchor" href="#动机-motivation-22"><span>动机（Motivation）</span></a></h4><p>在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为（方法），如果直接在基类中做这样的更改，将会给予子类带来很繁重的变更负担，甚至破坏原有设计。<br> 如何？</p><h3 id="意图-intent-22" tabindex="-1"><a class="header-anchor" href="#意图-intent-22"><span>意图（Intent）</span></a></h3><p>表示一个作用于某对象结构中的各元素的操作。它可以在不改变各元素的类的前提下定义作用于这些元素的新的操作。</p><h3 id="结构-struct-22" tabindex="-1"><a class="header-anchor" href="#结构-struct-22"><span>结构（Struct）</span></a></h3><figure><img src="https://img-blog.csdnimg.cn/20190323165232912.png" alt="Visitor" tabindex="0" loading="lazy"><figcaption>Visitor</figcaption></figure><h1 id="总结-23" tabindex="-1"><a class="header-anchor" href="#总结-23"><span>总结 （23）</span></a></h1><h2 id="创建型模式-5" tabindex="-1"><a class="header-anchor" href="#创建型模式-5"><span>创建型模式 （5）</span></a></h2><ul><li>Singleton模式解决的是实体对象个数的问题。除了Singleton之外，其他创建型模式解决的都是new所带来的耦合关系。</li><li>Factory Method，Abstract Factory，Builder都需要一个额外的工厂类来负责实例化“易变对象”，而Prototype则是通过原型（一个特殊的工程类）来克隆“易变对象”。</li><li>如果遇到“易变类”，起初的设计通常从Factory Method开始，当遇到更多的复杂变化时，在考虑重构为其他三种工厂模式（Abstract Factory，Builder，Prototype）</li></ul><h2 id="结构型模式-7" tabindex="-1"><a class="header-anchor" href="#结构型模式-7"><span>结构型模式 （7）</span></a></h2><ul><li>Adapter模式注重转换接口，将不吻合的接口适配对接</li><li>Bridge模式注重分离接口与其实现，支持多维度的变化</li><li>Composite模式注重统一接口，将“一对多”的关系转化为“一对一”的关系</li><li>Decorator模式注重稳定接口，再此前提下为对象扩展功能</li><li>Facade模式注重简化接口，简化组件系统与外部客户程序的依赖关系</li><li>Flyweight模式注重保留接口，在内部使用共享结束对对象存储进行优化</li><li>Proxy 模式注重假借接口，增加间接层来实现灵活控制</li></ul><h2 id="行为型模式-11" tabindex="-1"><a class="header-anchor" href="#行为型模式-11"><span>行为型模式 （11）</span></a></h2><ul><li>Template Method模式封装算法结构，支持算法子步骤变化</li><li>Strategy模式注重封装算法，支持算法的变化</li><li>State模式注重封装与状态相关的行为，支持状态的变化</li><li>Mement模式注重封装对象状态的变化，支持状态保存/恢复</li><li>Mediator模式注重封装对象间的交互，支持对象交互的变化</li><li>Chain of Responsibility模式注重封装对象责任，支持责任的变化</li><li>Command模式注重将请求封装为对象，支持请求的变化</li><li>Iterator模式注重封装集合对象内部结构，支持集合的变化</li><li>Interpreter模式注重封装特定领域变化，支持领域问题的频繁变化</li><li>Observer模式注重封装对象通知，支持通信对象的变化</li><li>Visitor模式注重封装对象操作变化，支持在运行时为类层次结构动态添加新的操作</li></ul>',174),u={id:"点击查看csdn",tabindex:"-1"},m={class:"header-anchor",href:"#点击查看csdn"},b={href:"https://blog.csdn.net/Jack_software/article/details/112570167",target:"_blank",rel:"noopener noreferrer"},f={id:"点击查看github",tabindex:"-1"},v={class:"header-anchor",href:"#点击查看github"},x={href:"https://github.com/lizhq/home-design-pattern",target:"_blank",rel:"noopener noreferrer"};function _(y,k){const e=r("ExternalLinkIcon");return l(),s("div",null,[t("h1",o,[t("a",d,[t("span",null,[t("a",p,[n("C#面向对象设计模式纵横谈"),a(e)])])])]),g,t("h3",u,[t("a",m,[t("span",null,[t("em",null,[t("a",b,[n("点击查看CSDN"),a(e)])])])])]),t("h3",f,[t("a",v,[t("span",null,[t("em",null,[t("a",x,[n("点击查看github"),a(e)])])])])])])}const M=i(h,[["render",_],["__file","0407b2.html.vue"]]),C=JSON.parse(`{"path":"/p2024/15/0407b2.html","title":"C#面向对象设计模式纵横谈","lang":"zh-CN","frontmatter":{"permalink":"/p2024/15/0407b2.html","lang":"zh-CN","title":"C#面向对象设计模式纵横谈","description":"C#面向对象设计模式纵横谈","isOriginal":true,"date":"2024-02-27T00:00:00.000Z","category":["设计模式"],"tag":["设计模式","CShape面向对象设计模式纵横谈","面向对象设计"],"head":[["meta",{"name":"keywords","content":"设计模式,C#面向对象设计模式纵横谈,面向对象设计"}],["meta",{"property":"og:url","content":"https://hub.nstudy.org/p2024/15/0407b2.html"}],["meta",{"property":"og:site_name","content":"Jack's 新学习基地"}],["meta",{"property":"og:title","content":"C#面向对象设计模式纵横谈"}],["meta",{"property":"og:description","content":"C#面向对象设计模式纵横谈"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/20190323141418277.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-19T08:21:32.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"CShape面向对象设计模式纵横谈"}],["meta",{"property":"article:tag","content":"面向对象设计"}],["meta",{"property":"article:published_time","content":"2024-02-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-19T08:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#面向对象设计模式纵横谈\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/20190323141418277.png\\",\\"https://img-blog.csdnimg.cn/20190323141513457.png\\",\\"https://img-blog.csdnimg.cn/20190323141605715.png\\",\\"https://img-blog.csdnimg.cn/20190323141242188.png\\",\\"https://img-blog.csdnimg.cn/20190323142502531.png\\",\\"https://img-blog.csdnimg.cn/20190323143049733.png\\",\\"https://img-blog.csdnimg.cn/2019032314313869.png\\",\\"https://img-blog.csdnimg.cn/20190323143758691.png\\",\\"https://img-blog.csdnimg.cn/20190323144532751.png\\",\\"https://img-blog.csdnimg.cn/20190323151139160.png\\",\\"https://img-blog.csdnimg.cn/20190323151252525.png\\",\\"https://img-blog.csdnimg.cn/20190323152058832.png\\",\\"https://img-blog.csdnimg.cn/20190323152304572.png\\",\\"https://img-blog.csdnimg.cn/20190323152653464.png\\",\\"https://img-blog.csdnimg.cn/20190323154818841.png\\",\\"https://img-blog.csdnimg.cn/20190323155729408.png\\",\\"https://img-blog.csdnimg.cn/20190323155819257.png\\",\\"https://img-blog.csdnimg.cn/2019032316072335.png\\",\\"https://img-blog.csdnimg.cn/20190323162803317.png\\",\\"https://img-blog.csdnimg.cn/20190323163139556.png\\",\\"https://img-blog.csdnimg.cn/20190323163610210.png\\",\\"https://img-blog.csdnimg.cn/20190323164217791.png\\",\\"https://img-blog.csdnimg.cn/20190323164617623.png\\",\\"https://img-blog.csdnimg.cn/20190323165232912.png\\"],\\"datePublished\\":\\"2024-02-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-19T08:21:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\",\\"url\\":\\"https://hub.nstudy.org\\"}]}"]],"star":true,"sticky":true},"headers":[{"level":2,"title":"面向对象设计模式与原则","slug":"面向对象设计模式与原则","link":"#面向对象设计模式与原则","children":[{"level":3,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]}]},{"level":2,"title":"23种设计模式 （1-5,6-12,13-23）","slug":"_23种设计模式-1-5-6-12-13-23","link":"#_23种设计模式-1-5-6-12-13-23","children":[{"level":3,"title":"1.Singleton单例模式","slug":"_1-singleton单例模式","link":"#_1-singleton单例模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent","link":"#意图-intent","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct","link":"#结构-struct","children":[]},{"level":3,"title":"2.Abstract Factory抽象工厂模式","slug":"_2-abstract-factory抽象工厂模式","link":"#_2-abstract-factory抽象工厂模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-1","link":"#意图-intent-1","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-1","link":"#结构-struct-1","children":[]},{"level":3,"title":"3.Builder生成器模式","slug":"_3-builder生成器模式","link":"#_3-builder生成器模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-2","link":"#意图-intent-2","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-2","link":"#结构-struct-2","children":[]},{"level":3,"title":"4.Factory Method工场方法模式","slug":"_4-factory-method工场方法模式","link":"#_4-factory-method工场方法模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-3","link":"#意图-intent-3","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-3","link":"#结构-struct-3","children":[]},{"level":3,"title":"5.Prototype原型模式","slug":"_5-prototype原型模式","link":"#_5-prototype原型模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-4","link":"#意图-intent-4","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-4","link":"#结构-struct-4","children":[]},{"level":3,"title":"6.Adapter适配器模式","slug":"_6-adapter适配器模式","link":"#_6-adapter适配器模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-5","link":"#意图-intent-5","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-5","link":"#结构-struct-5","children":[]},{"level":3,"title":"7.Bridge桥接模式","slug":"_7-bridge桥接模式","link":"#_7-bridge桥接模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-6","link":"#意图-intent-6","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-6","link":"#结构-struct-6","children":[]},{"level":3,"title":"8.Composite组合模式","slug":"_8-composite组合模式","link":"#_8-composite组合模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-7","link":"#意图-intent-7","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-7","link":"#结构-struct-7","children":[]},{"level":3,"title":"9.Decorator装饰模式","slug":"_9-decorator装饰模式","link":"#_9-decorator装饰模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-8","link":"#意图-intent-8","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-8","link":"#结构-struct-8","children":[]},{"level":3,"title":"10.Facade外观模式","slug":"_10-facade外观模式","link":"#_10-facade外观模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-9","link":"#意图-intent-9","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-9","link":"#结构-struct-9","children":[]},{"level":3,"title":"11.Flyweight享元模式","slug":"_11-flyweight享元模式","link":"#_11-flyweight享元模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-10","link":"#意图-intent-10","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-10","link":"#结构-struct-10","children":[]},{"level":3,"title":"12.Proxy代理模式","slug":"_12-proxy代理模式","link":"#_12-proxy代理模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-11","link":"#意图-intent-11","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-11","link":"#结构-struct-11","children":[]},{"level":3,"title":"13.Template Method模板方法","slug":"_13-template-method模板方法","link":"#_13-template-method模板方法","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-12","link":"#意图-intent-12","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-12","link":"#结构-struct-12","children":[]},{"level":3,"title":"14.Command模式","slug":"_14-command模式","link":"#_14-command模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-13","link":"#意图-intent-13","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-13","link":"#结构-struct-13","children":[]},{"level":3,"title":"15.Interpreter解释器模式","slug":"_15-interpreter解释器模式","link":"#_15-interpreter解释器模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-14","link":"#意图-intent-14","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-14","link":"#结构-struct-14","children":[]},{"level":3,"title":"16.Mediator中介者模式","slug":"_16-mediator中介者模式","link":"#_16-mediator中介者模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-15","link":"#意图-intent-15","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-15","link":"#结构-struct-15","children":[]},{"level":3,"title":"17.Iterator迭代器模式","slug":"_17-iterator迭代器模式","link":"#_17-iterator迭代器模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-16","link":"#意图-intent-16","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-16","link":"#结构-struct-16","children":[]},{"level":3,"title":"18.Observer观察者模式","slug":"_18-observer观察者模式","link":"#_18-observer观察者模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-17","link":"#意图-intent-17","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-17","link":"#结构-struct-17","children":[]},{"level":3,"title":"19.Chain of Responsibility职责链模式","slug":"_19-chain-of-responsibility职责链模式","link":"#_19-chain-of-responsibility职责链模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-18","link":"#意图-intent-18","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-18","link":"#结构-struct-18","children":[]},{"level":3,"title":"20.Mement备忘录模式","slug":"_20-mement备忘录模式","link":"#_20-mement备忘录模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-19","link":"#意图-intent-19","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-19","link":"#结构-struct-19","children":[]},{"level":3,"title":"21.State状态模式","slug":"_21-state状态模式","link":"#_21-state状态模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-20","link":"#意图-intent-20","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-20","link":"#结构-struct-20","children":[]},{"level":3,"title":"22.Strategy策略模式","slug":"_22-strategy策略模式","link":"#_22-strategy策略模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-21","link":"#意图-intent-21","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-21","link":"#结构-struct-21","children":[]},{"level":3,"title":"23.Visitor访问者模式","slug":"_23-visitor访问者模式","link":"#_23-visitor访问者模式","children":[]},{"level":3,"title":"意图（Intent）","slug":"意图-intent-22","link":"#意图-intent-22","children":[]},{"level":3,"title":"结构（Struct）","slug":"结构-struct-22","link":"#结构-struct-22","children":[]}]},{"level":2,"title":"创建型模式 （5）","slug":"创建型模式-5","link":"#创建型模式-5","children":[]},{"level":2,"title":"结构型模式 （7）","slug":"结构型模式-7","link":"#结构型模式-7","children":[]},{"level":2,"title":"行为型模式 （11）","slug":"行为型模式-11","link":"#行为型模式-11","children":[{"level":3,"title":"点击查看CSDN","slug":"点击查看csdn","link":"#点击查看csdn","children":[]},{"level":3,"title":"点击查看github","slug":"点击查看github","link":"#点击查看github","children":[]}]}],"git":{"createdTime":1713514892000,"updatedTime":1713514892000,"contributors":[{"name":"lizhiquan","email":"lizhiquan@jianke.com","commits":1}]},"readingTime":{"minutes":15.95,"words":4786},"filePathRelative":"15.设计模式/20190322_CShape面向对象设计模式纵横谈.md","localizedDate":"2024年2月27日","excerpt":"\\n<h2>面向对象设计模式与原则</h2>\\n<ul>\\n<li>针对接口编程，而不是针对实现编程</li>\\n<li>优先使用对象组合，而不是类继承</li>\\n<li>封装变化点</li>\\n<li>使用重构得到模式---设计模式的应用不宜先入为主</li>\\n</ul>\\n<h3>设计原则</h3>\\n<ul>\\n<li>单一职责原则（SRP）</li>\\n<li>开放封闭原则（OCP）</li>\\n<li>（里氏）Liskov替换原则（LSP）</li>\\n<li>依赖倒置原则（DIP）</li>\\n<li>接口隔离原则（ISP）</li>\\n<li></li>\\n<li>组合重用</li>\\n<li>迪米特（最小知识）原则</li>\\n</ul>"}`);export{M as comp,C as data};
