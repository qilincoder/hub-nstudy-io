import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,a as n,b as s,d as p,e as a}from"./app-CcdNUK7S.js";const l={},r=a(`<h1 id="初始化k8s多结点集群" tabindex="-1"><a class="header-anchor" href="#初始化k8s多结点集群"><span>初始化k8s多结点集群</span></a></h1><blockquote><p>本实践将在 Ubuntu 22.04.3LTS 系统上进行安装测试<br> docker版本 24.0.6<br> kubeadm版本 v1.28 次新版本<br> cir-docker 版本 v0.3.4 <strong>用来适配docker和k8s</strong></p></blockquote><h2 id="基础软件安装" tabindex="-1"><a class="header-anchor" href="#基础软件安装"><span>基础软件安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
<span class="token comment"># docker 当前版本 Client: Docker Engine - Community</span>
 Version:    <span class="token number">24.0</span>.6
<span class="token comment"># cri-dockerd 当前版本v0.3.4 https://github.com/Mirantis/cri-dockerd</span>

<span class="token function">wget</span> <span class="token punctuation">..</span><span class="token punctuation">..</span>./v0.3.4/cri-dockerd_0.3.4.3-0.ubuntu-jammy_amd64.deb
<span class="token function">apt</span> <span class="token function">install</span> ./cri-dockerd_0.3.4.3-0.ubuntu-jammy_amd64.deb
<span class="token function">vim</span> /lib/systemd/system/cri-docker.service
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --pod-infra-container-image registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9

<span class="token comment">#systemctl daemon-reload</span>
<span class="token comment">#systemctl restart cri-docker</span>

<span class="token comment"># 更新安装三件套</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> apt-transport-https ca-certificates <span class="token function">curl</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/kubernetes-apt-keyring.gpg
<span class="token builtin class-name">echo</span> <span class="token string">&#39;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/kubernetes.list

apt-mark unhold kubelet kubeadm kubectl
<span class="token function">apt-get</span> autoremove kubelet kubeadm kubectl
<span class="token function">apt-get</span> update
<span class="token comment">#apt-cache madison kubelet</span>
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建集群" tabindex="-1"><a class="header-anchor" href="#创建集群"><span>创建集群</span></a></h2>`,5),u={href:"https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ </span>
<span class="token comment"># 安装配置集群</span>
<span class="token comment"># kubeadm init --help</span>
kubeadm init <span class="token punctuation">\\</span>
    --image-repository<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers <span class="token punctuation">\\</span>
    --control-plane-endpoint<span class="token operator">=</span><span class="token string">&quot;home.local.com&quot;</span> <span class="token punctuation">\\</span>
    --apiserver-advertise-address<span class="token operator">=</span> local_ip <span class="token punctuation">\\</span>
    --pod-network-cidr<span class="token operator">=</span><span class="token number">10.10</span>.0.0/16 <span class="token punctuation">\\</span>
    --service-cidr<span class="token operator">=</span><span class="token number">10.20</span>.0.0/16 <span class="token punctuation">\\</span>
    --token-ttl<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">\\</span>
    --cri-socket unix:///run/cri-dockerd.sock <span class="token punctuation">\\</span>
    --upload-certs

<span class="token comment"># kubeadm config images list --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span>
<span class="token comment"># kubeadm config images pull --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span>
 
kubeadm reset --cri-socket unix:///run/cri-dockerd.sock
<span class="token comment"># unix:///var/run/containerd/containerd.sock</span>
<span class="token comment">##################</span>
kubectl taint nodes <span class="token parameter variable">--all</span> node-role.kubernetes.io/control-plane-

kubectl label <span class="token function">node</span> slave-node node-role.kubernetes.io/worker<span class="token operator">=</span>worker
<span class="token comment">###################################  </span>
<span class="token function">vim</span> /etc/kubernetes/manifests/kube-apiserver.yaml
- kube-apiserver
<span class="token comment">###################################</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装成功提示日志" tabindex="-1"><a class="header-anchor" href="#安装成功提示日志"><span>安装成功提示日志</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>init<span class="token punctuation">]</span> Using Kubernetes version: v1.28.2
<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks
<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster
<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection
<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">&#39;kubeadm config images pull&#39;</span>
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">&quot;/etc/kubernetes/pki&quot;</span>
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;ca&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;apiserver&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>aip-dev.jianke.com aip-master-node kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.20</span>.0.1 <span class="token number">172.17</span>.240.83<span class="token punctuation">]</span>
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;apiserver-kubelet-client&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;front-proxy-ca&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;front-proxy-client&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;etcd/ca&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;etcd/server&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>aip-master-node localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">172.17</span>.xxx.xxx <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span>
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;etcd/peer&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>aip-master-node localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">172.17</span>.xxx.xxx <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span>
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;etcd/healthcheck-client&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;apiserver-etcd-client&quot;</span> certificate and key
<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;sa&quot;</span> key and public key
<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">&quot;/etc/kubernetes&quot;</span>
W0927 <span class="token number">11</span>:49:39.433405   <span class="token number">10590</span> endpoint.go:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> WARNING: port specified <span class="token keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="token keyword">in</span> the controlplane address
<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">&quot;admin.conf&quot;</span> kubeconfig <span class="token function">file</span>
W0927 <span class="token number">11</span>:49:39.570771   <span class="token number">10590</span> endpoint.go:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> WARNING: port specified <span class="token keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="token keyword">in</span> the controlplane address
<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">&quot;kubelet.conf&quot;</span> kubeconfig <span class="token function">file</span>
W0927 <span class="token number">11</span>:49:39.880883   <span class="token number">10590</span> endpoint.go:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> WARNING: port specified <span class="token keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="token keyword">in</span> the controlplane address
<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">&quot;controller-manager.conf&quot;</span> kubeconfig <span class="token function">file</span>
W0927 <span class="token number">11</span>:49:40.024566   <span class="token number">10590</span> endpoint.go:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> WARNING: port specified <span class="token keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="token keyword">in</span> the controlplane address
<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">&quot;scheduler.conf&quot;</span> kubeconfig <span class="token function">file</span>
<span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token builtin class-name">local</span> etcd <span class="token keyword">in</span> <span class="token string">&quot;/etc/kubernetes/manifests&quot;</span>
<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">&quot;/etc/kubernetes/manifests&quot;</span>
<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">&quot;kube-apiserver&quot;</span>
<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">&quot;kube-controller-manager&quot;</span>
<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">&quot;kube-scheduler&quot;</span>
<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span>
<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">&quot;/var/lib/kubelet/config.yaml&quot;</span>
<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet
<span class="token punctuation">[</span>wait-control-plane<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="token string">&quot;/etc/kubernetes/manifests&quot;</span><span class="token builtin class-name">.</span> This can take up to 4m0s
<span class="token punctuation">[</span>apiclient<span class="token punctuation">]</span> All control plane components are healthy after <span class="token number">8.587821</span> seconds
<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">&quot;kubeadm-config&quot;</span> <span class="token keyword">in</span> the <span class="token string">&quot;kube-system&quot;</span> Namespace
<span class="token punctuation">[</span>kubelet<span class="token punctuation">]</span> Creating a ConfigMap <span class="token string">&quot;kubelet-config&quot;</span> <span class="token keyword">in</span> namespace kube-system with the configuration <span class="token keyword">for</span> the kubelets <span class="token keyword">in</span> the cluster
<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Storing the certificates <span class="token keyword">in</span> Secret <span class="token string">&quot;kubeadm-certs&quot;</span> <span class="token keyword">in</span> the <span class="token string">&quot;kube-system&quot;</span> Namespace
<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Using certificate key:
be68bf0d7c0b60c085ddccacb6604a5ec1574560d0070ebb863ebe0557e85335
<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> aip-master-node as control-plane by adding the labels: <span class="token punctuation">[</span>node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers<span class="token punctuation">]</span>
<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> aip-master-node as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/control-plane:NoSchedule<span class="token punctuation">]</span>
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Using token: laq5s9.rsniw4r91yhh0d9d
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configured RBAC rules to allow Node Bootstrap tokens to get nodes
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="token keyword">in</span> order <span class="token keyword">for</span> nodes to get long term certificate credentials
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configured RBAC rules to allow certificate rotation <span class="token keyword">for</span> all <span class="token function">node</span> client certificates <span class="token keyword">in</span> the cluster
<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Creating the <span class="token string">&quot;cluster-info&quot;</span> ConfigMap <span class="token keyword">in</span> the <span class="token string">&quot;kube-public&quot;</span> namespace
<span class="token punctuation">[</span>kubelet-finalize<span class="token punctuation">]</span> Updating <span class="token string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key
<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: CoreDNS
W0927 <span class="token number">11</span>:49:51.443749   <span class="token number">10590</span> endpoint.go:57<span class="token punctuation">]</span> <span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> WARNING: port specified <span class="token keyword">in</span> controlPlaneEndpoint overrides bindPort <span class="token keyword">in</span> the controlplane address
<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully<span class="token operator">!</span>

To start using your cluster, you need to run the following as a regular user:

  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube
  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config
  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config

Alternatively, <span class="token keyword">if</span> you are the root user, you can run:

  <span class="token builtin class-name">export</span> <span class="token assign-left variable">KUBECONFIG</span><span class="token operator">=</span>/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run <span class="token string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now <span class="token function">join</span> any number of the control-plane <span class="token function">node</span> running the following <span class="token builtin class-name">command</span> on each as root:

  kubeadm <span class="token function">join</span> home.local.com:6448 <span class="token parameter variable">--token</span> laq5s9.rsniw4r91yhh0d9d <span class="token punctuation">\\</span>
    --discovery-token-ca-cert-hash sha256:c67fbcc90d026413c544e11171276f10dc6c2d441976f361cc96698cb1a8180fe4d <span class="token punctuation">\\</span>
    --control-plane --certificate-key be68bf0d7c0b60c085dd2ccacb6604a5e2c1574560d0070ebb863ebe0557e85335 <span class="token punctuation">\\</span>
        --cri-socket unix:///run/cri-dockerd.sock

Please note that the certificate-key gives access to cluster sensitive data, keep it secret<span class="token operator">!</span>
As a safeguard, uploaded-certs will be deleted <span class="token keyword">in</span> two hours<span class="token punctuation">;</span> If necessary, you can use
<span class="token string">&quot;kubeadm init phase upload-certs --upload-certs&quot;</span> to reload certs afterward.

Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:

kubeadm <span class="token function">join</span> home.local.com:6448 <span class="token parameter variable">--token</span> laq5s9.rsniw4r91yhh0d9d <span class="token punctuation">\\</span>
    --discovery-token-ca-cert-hash sha256:c67fbcc910d0643c544e11171276f210dc6cd441976f361cc96698cb1a8180fe4d <span class="token punctuation">\\</span>
        --cri-socket unix:///run/cri-dockerd.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他命令参考" tabindex="-1"><a class="header-anchor" href="#其他命令参考"><span>其他命令参考</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl drain aip-slave-node --ignore-daemonsets --delete-emptydir-data
kubectl delete <span class="token function">node</span> aip-slave-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function k(b,m){const e=o("ExternalLinkIcon");return i(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("官方资料参考 "),n("a",u,[s("创建集群"),p(e)])])]),d])}const f=t(l,[["render",k],["__file","3a309d.html.vue"]]),h=JSON.parse(`{"path":"/p2024/Kubernetes/3a309d.html","title":"初始化k8s多结点集群","lang":"zh-CN","frontmatter":{"permalink":"/p2024/Kubernetes/3a309d.html","lang":"zh-CN","title":"初始化k8s多结点集群","description":"初始化k8s多结点集群","isOriginal":true,"date":"2024-03-27T00:00:00.000Z","category":["Kubernetes","k8s"],"tag":["Kubernetes","k8s"],"head":[["meta",{"name":"keywords","content":"初始化k8s多结点集群,Kubernetes,k8s"}],["meta",{"property":"og:url","content":"https://hub.nstudy.org/p2024/Kubernetes/3a309d.html"}],["meta",{"property":"og:site_name","content":"Jack's 新学习基地"}],["meta",{"property":"og:title","content":"初始化k8s多结点集群"}],["meta",{"property":"og:description","content":"初始化k8s多结点集群"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-19T07:50:23.000Z"}],["meta",{"property":"article:author","content":"Jack"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:published_time","content":"2024-03-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-19T07:50:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初始化k8s多结点集群\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-19T07:50:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jack\\",\\"url\\":\\"https://hub.nstudy.org\\"}]}"]],"star":true,"sticky":true},"headers":[{"level":2,"title":"基础软件安装","slug":"基础软件安装","link":"#基础软件安装","children":[]},{"level":2,"title":"创建集群","slug":"创建集群","link":"#创建集群","children":[]},{"level":2,"title":"安装成功提示日志","slug":"安装成功提示日志","link":"#安装成功提示日志","children":[]},{"level":2,"title":"其他命令参考","slug":"其他命令参考","link":"#其他命令参考","children":[]}],"git":{"createdTime":1713513023000,"updatedTime":1713513023000,"contributors":[{"name":"lizhiquan","email":"lizhiquan@jianke.com","commits":1}]},"readingTime":{"minutes":4.08,"words":1225},"filePathRelative":"07.Kubernetes/20240327_初始化k8s多结点集群.md","localizedDate":"2024年3月27日","excerpt":"\\n<blockquote>\\n<p>本实践将在 Ubuntu 22.04.3LTS 系统上进行安装测试<br>\\ndocker版本  24.0.6<br>\\nkubeadm版本 v1.28 次新版本<br>\\ncir-docker 版本 v0.3.4 <strong>用来适配docker和k8s</strong></p>\\n</blockquote>\\n<h2>基础软件安装</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>\\n<span class=\\"token comment\\"># docker 当前版本 Client: Docker Engine - Community</span>\\n Version:    <span class=\\"token number\\">24.0</span>.6\\n<span class=\\"token comment\\"># cri-dockerd 当前版本v0.3.4 https://github.com/Mirantis/cri-dockerd</span>\\n\\n<span class=\\"token function\\">wget</span> <span class=\\"token punctuation\\">..</span><span class=\\"token punctuation\\">..</span>./v0.3.4/cri-dockerd_0.3.4.3-0.ubuntu-jammy_amd64.deb\\n<span class=\\"token function\\">apt</span> <span class=\\"token function\\">install</span> ./cri-dockerd_0.3.4.3-0.ubuntu-jammy_amd64.deb\\n<span class=\\"token function\\">vim</span> /lib/systemd/system/cri-docker.service\\n<span class=\\"token assign-left variable\\">ExecStart</span><span class=\\"token operator\\">=</span>/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --pod-infra-container-image registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9\\n\\n<span class=\\"token comment\\">#systemctl daemon-reload</span>\\n<span class=\\"token comment\\">#systemctl restart cri-docker</span>\\n\\n<span class=\\"token comment\\"># 更新安装三件套</span>\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt-get</span> update\\n<span class=\\"token function\\">sudo</span> <span class=\\"token function\\">apt-get</span> <span class=\\"token function\\">install</span> <span class=\\"token parameter variable\\">-y</span> apt-transport-https ca-certificates <span class=\\"token function\\">curl</span>\\n<span class=\\"token function\\">curl</span> <span class=\\"token parameter variable\\">-fsSL</span> https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key <span class=\\"token operator\\">|</span> <span class=\\"token function\\">sudo</span> gpg <span class=\\"token parameter variable\\">--dearmor</span> <span class=\\"token parameter variable\\">-o</span> /etc/apt/keyrings/kubernetes-apt-keyring.gpg\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /'</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">sudo</span> <span class=\\"token function\\">tee</span> /etc/apt/sources.list.d/kubernetes.list\\n\\napt-mark unhold kubelet kubeadm kubectl\\n<span class=\\"token function\\">apt-get</span> autoremove kubelet kubeadm kubectl\\n<span class=\\"token function\\">apt-get</span> update\\n<span class=\\"token comment\\">#apt-cache madison kubelet</span>\\n<span class=\\"token function\\">apt-get</span> <span class=\\"token function\\">install</span> <span class=\\"token parameter variable\\">-y</span> kubelet kubeadm kubectl\\napt-mark hold kubelet kubeadm kubectl\\n\\n</code></pre></div>"}`);export{f as comp,h as data};
